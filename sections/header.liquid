<header class="header header--{{ section.settings.menu_type_desktop }} page-width{% if section.settings.sticky_header %} header--sticky{% endif %}">
  <div class="header__inner">
    {%- if section.settings.menu_type_desktop == 'drawer' -%}
      <button type="button" class="header__icon header__icon--menu" aria-label="Open menu">
        {% render 'icon-menu' %}
      </button>
    {%- endif -%}

    <a href="{{ routes.root_url }}" class="header__heading-link link link--text focus-inset">
      {%- if settings.logo != blank -%}
        <img src="{{ settings.logo | image_url: width: settings.logo_max_width }}"
          alt="{{ settings.logo.alt | default: shop.name | escape }}"
          class="header__heading-logo"
          width="{{ settings.logo_max_width }}"
          height="{{ settings.logo_max_width | divided_by: settings.logo.aspect_ratio | round }}"
          loading="lazy"
        >
      {%- else -%}
        <span class="header__heading">{{ shop.name }}</span>
      {%- endif -%}
    </a>

    {%- if section.settings.menu_type_desktop != 'drawer' -%}
      <nav class="header__inline-menu">
        <ul class="list-menu list-menu--inline" role="list">
          {%- for link in section.settings.menu.links -%}
            <li>
              {%- if link.links != blank -%}
                <details-disclosure>
                  <details id="Details-HeaderMenu-{{ forloop.index }}">
                    <summary class="header__menu-item list-menu__item link focus-inset">
                      <span {%- if link.child_active %} class="header__active-menu-item"{% endif %}>{{ link.title | escape }}</span>
                      {% render 'icon-caret' %}
                    </summary>
                    <ul id="HeaderMenu-MenuList-{{ forloop.index }}" class="header__submenu list-menu list-menu--disclosure" role="list" tabindex="-1">
                      {%- for childlink in link.links -%}
                        <li>
                          <a href="{{ childlink.url }}" class="header__menu-item list-menu__item link link--text focus-inset{% if childlink.current %} list-menu__item--active{% endif %}"{% if childlink.current %} aria-current="page"{% endif %}>
                            {{ childlink.title | escape }}
                          </a>
                        </li>
                      {%- endfor -%}
                    </ul>
                  </details>
                </details-disclosure>
              {%- else -%}
                <a href="{{ link.url }}" class="header__menu-item list-menu__item link link--text focus-inset"{% if link.current %} aria-current="page"{% endif %}>
                  <span {%- if link.current %} class="header__active-menu-item"{% endif %}>{{ link.title | escape }}</span>
                </a>
              {%- endif -%}
            </li>
          {%- endfor -%}
        </ul>
      </nav>
    {%- endif -%}

    <div class="header__icons">
      {%- if settings.show_search -%}
        <button type="button" class="header__icon header__icon--search" aria-label="Search">
          {% render 'icon-search' %}
        </button>
      {%- endif -%}

      {%- if shop.customer_accounts_enabled -%}
        <a href="{%- if customer -%}{{ routes.account_url }}{%- else -%}{{ routes.account_login_url }}{%- endif -%}" class="header__icon header__icon--account">
          {% render 'icon-account' %}
          <span class="visually-hidden">
            {%- liquid
              if customer
                echo 'customer.account_fallback' | t
              else
                echo 'customer.log_in' | t
              endif
            -%}
          </span>
        </a>
      {%- endif -%}

      <a href="{{ routes.cart_url }}" class="header__icon header__icon--cart" id="cart-icon-bubble">
        {% render 'icon-cart' %}
        <span class="visually-hidden">{{ 'templates.cart.cart' | t }}</span>
        {%- if cart != empty -%}
          <div class="cart-count-bubble">
            {%- if cart.item_count < 100 -%}
              <span aria-hidden="true">{{ cart.item_count }}</span>
            {%- endif -%}
            <span class="visually-hidden">{{ 'sections.header.cart_count' | t: count: cart.item_count }}</span>
          </div>
        {%- endif -%}
      </a>
    </div>
  </div>
</header>

{% javascript %}
  class StickyHeader extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      this.header = document.querySelector('.header--sticky');
      this.headerBounds = {};
      this.currentScrollTop = 0;

      this.onScrollHandler = this.onScroll.bind(this);
      window.addEventListener('scroll', this.onScrollHandler, false);

      this.createObserver();
    }

    disconnectedCallback() {
      window.removeEventListener('scroll', this.onScrollHandler);
    }

    createObserver() {
      let observer = new IntersectionObserver((entries, observer) => {
        this.headerBounds = entries[0].intersectionRect;
        observer.disconnect();
      });

      observer.observe(this.header);
    }

    onScroll() {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

      if (scrollTop > this.currentScrollTop && scrollTop > this.headerBounds.bottom) {
        requestAnimationFrame(this.hide.bind(this));
      } else if (scrollTop < this.currentScrollTop && scrollTop > this.headerBounds.bottom) {
        requestAnimationFrame(this.reveal.bind(this));
      } else if (scrollTop <= this.headerBounds.top) {
        requestAnimationFrame(this.reset.bind(this));
      }

      this.currentScrollTop = scrollTop;
    }

    hide() {
      this.header.classList.add('header--hidden');
    }

    reveal() {
      this.header.classList.add('header--reveal');
    }

    reset() {
      this.header.classList.remove('header--hidden', 'header--reveal');
    }
  }

  customElements.define('sticky-header', StickyHeader);
{% endjavascript %}

{% schema %}
{
  "name": "Header",
  "class": "section-header",
  "settings": [
    {
      "type": "select",
      "id": "menu_type_desktop",
      "options": [
        {
          "value": "drawer",
          "label": "Drawer"
        },
        {
          "value": "mega",
          "label": "Mega menu"
        }
      ],
      "default": "mega",
      "label": "Desktop menu type"
    },
    {
      "type": "link_list",
      "id": "menu",
      "default": "main-menu",
      "label": "Menu"
    },
    {
      "type": "checkbox",
      "id": "sticky_header",
      "default": true,
      "label": "Enable sticky header"
    }
  ]
}
{% endschema %}